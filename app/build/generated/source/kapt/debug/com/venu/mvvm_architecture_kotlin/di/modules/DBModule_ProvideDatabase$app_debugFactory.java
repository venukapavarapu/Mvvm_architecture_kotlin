// Generated by Dagger (https://dagger.dev).
package com.venu.mvvm_architecture_kotlin.di.modules;

import com.venu.mvvm_architecture_kotlin.MyApp;
import com.venu.mvvm_architecture_kotlin.data.room.db.DBHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DBModule_ProvideDatabase$app_debugFactory implements Factory<DBHelper> {
  private final DBModule module;

  private final Provider<MyApp> applicationProvider;

  public DBModule_ProvideDatabase$app_debugFactory(DBModule module,
      Provider<MyApp> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public DBHelper get() {
    return provideDatabase$app_debug(module, applicationProvider.get());
  }

  public static DBModule_ProvideDatabase$app_debugFactory create(DBModule module,
      Provider<MyApp> applicationProvider) {
    return new DBModule_ProvideDatabase$app_debugFactory(module, applicationProvider);
  }

  public static DBHelper provideDatabase$app_debug(DBModule instance, MyApp application) {
    return Preconditions.checkNotNull(instance.provideDatabase$app_debug(application), "Cannot return null from a non-@Nullable @Provides method");
  }
}
