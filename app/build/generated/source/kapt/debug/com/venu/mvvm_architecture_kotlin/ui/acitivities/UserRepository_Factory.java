// Generated by Dagger (https://dagger.dev).
package com.venu.mvvm_architecture_kotlin.ui.acitivities;

import com.venu.mvvm_architecture_kotlin.data.api.ApiService;
import com.venu.mvvm_architecture_kotlin.data.room.dao.VersionsDao;
import com.venu.mvvm_architecture_kotlin.di.modules.AppExecutors;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepository_Factory implements Factory<UserRepository> {
  private final Provider<AppExecutors> appExecutorsProvider;

  private final Provider<ApiService> apiServiceProvider;

  private final Provider<VersionsDao> versionsDaoProvider;

  public UserRepository_Factory(Provider<AppExecutors> appExecutorsProvider,
      Provider<ApiService> apiServiceProvider, Provider<VersionsDao> versionsDaoProvider) {
    this.appExecutorsProvider = appExecutorsProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.versionsDaoProvider = versionsDaoProvider;
  }

  @Override
  public UserRepository get() {
    return new UserRepository(appExecutorsProvider.get(), apiServiceProvider.get(), versionsDaoProvider.get());
  }

  public static UserRepository_Factory create(Provider<AppExecutors> appExecutorsProvider,
      Provider<ApiService> apiServiceProvider, Provider<VersionsDao> versionsDaoProvider) {
    return new UserRepository_Factory(appExecutorsProvider, apiServiceProvider, versionsDaoProvider);
  }

  public static UserRepository newInstance(AppExecutors appExecutors, ApiService apiService,
      VersionsDao versionsDao) {
    return new UserRepository(appExecutors, apiService, versionsDao);
  }
}
